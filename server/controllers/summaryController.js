import Summary from '../models/Summary.js';
import User from '../models/User.js';
import groq from '../config/groqClient.js';
import transporter from '../config/mailer.js';

export const generateSummary = async (req, res) => {
  try {
    const { transcript, prompt, title } = req.body;
    if (!transcript) return res.status(400).json({ message: 'Transcript is required' });
   
    const userPrompt = prompt || '';

    const structuredPrompt = `
    Please provide a clear and well-organized meeting summary written in plain readable paragraphs suitable for a busy business professional. Avoid markdown tables or complex formatting. 
    Structure the summary into the following sections with clear headings:
    1. Overview: A brief high-level summary of the meeting.
    2. Key Findings: Summarize the main metrics, decisions, and risks discussed.
    3. Action Items: List all action items with responsible persons and due dates in sentence form.
    4. Next Steps: Provide a concise plan for what happens next.
    Use complete sentences, simple language, and formatting that is easy to read on any device (e.g., no markdown or raw HTML). Make it look like a professional email summary ready to share.
    `;

    const finalPrompt = `${userPrompt}\n\n${structuredPrompt}`;


     let summary;
    try {
      const completion = await groq.chat.completions.create({
        model: 'openai/gpt-oss-20b',
        messages: [
            { role: 'system', content: "You are a professional meeting summarizer. Create clear, structured summaries from meeting transcripts." },
            { role: 'user', content: `${finalPrompt}\n\nTranscript:\n${transcript}` }
        ],
        max_tokens: 1000,
        temperature: 0.7
      });

      summary = completion.choices[0]?.message?.content || '';
    } catch (aiError) {
      console.error('Groq API error:', aiError);
      const lines = transcript.split('\n').filter(l => l.trim());
      const keyPoints = lines.slice(0, 5).map((line, i) => `${i+1}. ${line.trim()}`);

      summary = `SUMMARY (Generated without AI due to API limitations):\n\n` +
                `Meeting Overview:\n${transcript.substring(0, 300)}...\n\n` +
                `Key Points:\n${keyPoints.join('\n')}\n\n` +
                `Instructions: ${finalPrompt}\n\n` +
                `Note: Please review and edit as needed.`;
    }

    const summaryDoc = new Summary({
      userId: req.user.userId,
      transcript,
      prompt: userPrompt,
      content: summary,
      originalSummary: summary,
      title: title && title.trim() !== '' ? title.trim() : 'Meeting Summary' 
    });
    await summaryDoc.save();

    res.json({ summary, summaryId: summaryDoc._id });

  } catch (error) {
    console.error('Summary generation error:', error);
    res.status(500).json({ message: 'Error generating summary' });
  }
};

export const getSummaries = async (req, res) => {
  try {
    const userSummaries = await Summary.find({ userId: req.user.userId })
      .sort({ createdAt: -1 })
      .select('title content prompt transcript createdAt updatedAt');

    res.json(userSummaries);
  } catch (error) {
    console.error('Get summaries error:', error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const updateSummary = async (req, res) => {
  try {
    const { content, title } = req.body;
    const summaryId = req.params.id;

    const summary = await Summary.findOne({ _id: summaryId, userId: req.user.userId });
    if (!summary) return res.status(404).json({ message: 'Summary not found' });

    summary.content = content || summary.content;
    summary.title = title || summary.title;
    summary.updatedAt = new Date();
    await summary.save();

    res.json({ message: 'Summary updated successfully' });
  } catch (error) {
    console.error('Update summary error:', error);
    res.status(500).json({ message: 'Error updating summary' });
  }
};

export const shareSummary = async (req, res) => {
  try {
    const { summary, recipients, summaryId } = req.body;
    if (!summary || !recipients || recipients.length === 0)
      return res.status(400).json({ message: 'Summary and recipients are required' });

    const user = await User.findById(req.user.userId);

    const mailOptions = {
      from: process.env.EMAIL_USER || 'noreply@meetingsummarizer.com',
      to: recipients.join(','),
      subject: 'Meeting Summary',
      html: `
        <h2>Meeting Summary</h2>
        <p><strong>Shared by:</strong> ${user.name} (${user.email})</p>
        <hr>
        <div style="white-space: pre-wrap; font-family: Arial, sans-serif; line-height: 1.6; margin: 20px 0;">
          ${summary.replace(/\n/g, '<br>')}
        </div>
        <hr>
        <p style="color: #666; font-size: 12px;">
          This summary was generated by SummarizeIQ and shared on ${new Date().toLocaleDateString()}
        </p>
      `
    };

    try {
      await transporter.sendMail(mailOptions);
      if (summaryId) {
        await Summary.findByIdAndUpdate(summaryId, { updatedAt: new Date() });
      }
      res.json({ message: 'Summary sent successfully' });
    } catch (emailError) {
      console.error('Email error:', emailError);
      res.json({ message: 'Summary prepared for sending (email service configuration needed)' });
    }
  } catch (error) {
    console.error('Share summary error:', error);
    res.status(500).json({ message: 'Error sharing summary' });
  }
};

export const deleteSummary = async (req, res) => {
  try {
    const summaryId = req.params.id;
    const result = await Summary.findOneAndDelete({ _id: summaryId, userId: req.user.userId });
    if (!result) return res.status(404).json({ message: 'Summary not found' });

    res.json({ message: 'Summary deleted successfully' });
  } catch (error) {
    console.error('Delete summary error:', error);
    res.status(500).json({ message: 'Error deleting summary' });
  }
};
